<?xml version="1.0" encoding="utf-8"?>
<Application xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:gsc="clr-namespace:GraphSharp.Controls;assembly=GraphSharp.Controls"
             xmlns:vm="clr-namespace:SIL.Cog.Application.ViewModels;assembly=SIL.Cog.Application"
             xmlns:p="clr-namespace:SIL.Cog.Presentation"
             xmlns:cnvtrs="clr-namespace:SIL.Cog.Presentation.Converters"
             xmlns:c="clr-namespace:SIL.Cog.Presentation.Controls" xmlns:sys="clr-namespace:System;assembly=mscorlib"
			 xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"
             mc:Ignorable="d"
             x:Class="SIL.Cog.Presentation.App">
    <Application.Resources>
        <ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="Themes/Generic.xaml" />
			</ResourceDictionary.MergedDictionaries>

			<p:ViewModelLocator x:Key="Locator" d:IsDataSource="True" />
			
			<sys:Double x:Key="PhoneticFontSize">16</sys:Double>

			<cnvtrs:ContentToPathConverter x:Key="Content2PathConverter"/>
			<cnvtrs:ContentToMarginConverter x:Key="Content2MarginConverter"/>
			<cnvtrs:PercentageToStrokeThicknessConverter x:Key="StrokeThicknessConverter" />
			<cnvtrs:IsTextTrimmedConverter x:Key="IsTextTrimmedConverter" />

			<SolidColorBrush x:Key="SelectedTabBackgroundBrush" Color="#FF315599" />
			<SolidColorBrush x:Key="TabBackgroundBrush" Color="#FF7388B0" />
			<SolidColorBrush x:Key="SelectedTabTextBrush" Color="#FFDFDF7F" />
			<SolidColorBrush x:Key="TabBorderBrush" Color="White"/>
			<LinearGradientBrush x:Key="TaskAreaBackgroundBrush" StartPoint="0,0.5" EndPoint="1,0.5">
				<GradientStop Color="#FFCBE4FC" Offset="0" />
				<GradientStop Color="#FFE2F1FE" Offset="1" />
			</LinearGradientBrush>
			<SolidColorBrush x:Key="TaskAreaBorderBrush" Color="#FFBCDAF7" />
			<SolidColorBrush x:Key="ViewBackgroundBrush" Color="White" />
			<SolidColorBrush x:Key="SubTabMouseOverBrush" Color="#FF264587" />
			<LinearGradientBrush x:Key="MainWindowBrush" StartPoint="0,0" EndPoint="1,1">
				<GradientStop Color="#FF3164a5" Offset="1"/>
				<GradientStop Color="#FF8AAED4" Offset="0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="ControlPanelBackgroundBrush" Color="#FFB5D2F0" />
			<SolidColorBrush x:Key="TaskAreaHeaderLineBrush" Color="#FF88B0E4" />
			<SolidColorBrush x:Key="SettingsAreaBackgroundBrush" Color="#FFEFF7FD" />
			<SolidColorBrush x:Key="Variety1Brush" Color="DarkOrange" />
			<SolidColorBrush x:Key="Variety2Brush" Color="DarkOrchid" />
			<SolidColorBrush x:Key="ContextMenuBackgroundBrush" Color="#FFD2E8FD" />
			<SolidColorBrush x:Key="ContextMenuBorderBrush" Color="#FFA9B4BF" />
			<SolidColorBrush x:Key="ContextMenuHighlightedBrush" Color="#FF98C0EB" />
			
			<Style x:Key="MainWindowStyle" TargetType="Window">
				<Setter Property="Background" Value="{StaticResource MainWindowBrush}" />
				<Setter Property="FontSize" Value="12" />
			</Style>

			<Style x:Key="MainTabControlStyle" TargetType="TabControl">
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="TabControl">
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<Border Grid.Row="1" BorderThickness="2,0,2,2" Panel.ZIndex="2" BorderBrush="{StaticResource TabBorderBrush}" CornerRadius="0,0,2,2"
								Background="{StaticResource SelectedTabBackgroundBrush}">
									<Grid x:Name="PART_ItemsHolder" />
									<!--ContentPresenter ContentSource="SelectedContent"/-->
								</Border>
								<StackPanel Orientation="Horizontal" Grid.Row="0" Panel.ZIndex="1" IsItemsHost="true"/>
								<Rectangle Grid.Row="0" Height="2" VerticalAlignment="Bottom" Fill="{StaticResource TabBorderBrush}"/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="MainTabItemStyle" TargetType="TabItem">
				<Setter Property="SnapsToDevicePixels" Value="True"/>
				<Setter Property="FontSize" Value="16" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="TabItem">
							<Grid x:Name="grd">
								<Path x:Name="TabPath" StrokeThickness="2" Margin="{Binding ElementName=TabItemContent, Converter={StaticResource Content2MarginConverter}}"
                                      Stroke="{StaticResource TabBorderBrush}" Fill="{StaticResource TabBackgroundBrush}"
                                      Data="{Binding ElementName=TabItemContent, Converter={StaticResource Content2PathConverter}}">
									<Path.LayoutTransform>
										<ScaleTransform ScaleY="-1"/>
									</Path.LayoutTransform>
								</Path>
								<Rectangle x:Name="TabItemTopBorder" Height="2" Visibility="Visible"
                                   VerticalAlignment="Bottom" Fill="{StaticResource TabBorderBrush}"
                                   Margin="{Binding ElementName=TabItemContent, Converter={StaticResource Content2MarginConverter}}" />
								<ContentPresenter x:Name="TabItemContent" ContentSource="Header" Margin="10,2,10,2" VerticalAlignment="Center" TextElement.Foreground="White"/>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True" SourceName="grd">
									<Setter Property="TextElement.Foreground" Value="{StaticResource SelectedTabTextBrush}" TargetName="TabItemContent"/>
								</Trigger>
								<Trigger Property="Selector.IsSelected" Value="True">
									<Setter Property="Fill" TargetName="TabPath" Value="{StaticResource SelectedTabBackgroundBrush}" />
									<Setter Property="Panel.ZIndex" Value="2"/>
									<Setter Property="Visibility" Value="Hidden" TargetName="TabItemTopBorder"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="SubTabControlStyle" TargetType="TabControl">
				<Setter Property="Background" Value="{StaticResource SelectedTabBackgroundBrush}" />
			</Style>

			<Style x:Key="SubTabItemStyle" TargetType="TabItem">
				<Setter Property="FontSize" Value="14" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="TabItem">
							<Grid x:Name="grd">
								<Border x:Name="border" BorderBrush="{StaticResource SelectedTabBackgroundBrush}">
									<ContentPresenter x:Name="TabItemContent" ContentSource="Header" Margin="10,2,10,5" VerticalAlignment="Center" TextElement.Foreground="White"/>
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsMouseOver" Value="True" SourceName="grd">
									<Setter Property="TextElement.Foreground" Value="{StaticResource SelectedTabTextBrush}" TargetName="TabItemContent"/>
									<Setter Property="Background" Value="{StaticResource SubTabMouseOverBrush}" TargetName="border" />
								</Trigger>
								<Trigger Property="Selector.IsSelected" Value="True">
									<Setter Property="TextElement.Foreground" Value="{StaticResource SelectedTabTextBrush}" TargetName="TabItemContent"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="SettingsAreaStyle" TargetType="HeaderedContentControl">
				<Setter Property="HeaderTemplate">
					<Setter.Value>
						<DataTemplate>
							<Border BorderBrush="{StaticResource ListBorderBrush}" BorderThickness="1" Background="{StaticResource DataGridHeaderBrush}" Padding="10">
								<TextBlock Foreground="{StaticResource HeaderTextBrush}" FontWeight="Bold" Text="{TemplateBinding ContentControl.Content}" />
							</Border>
						</DataTemplate>
					</Setter.Value>
				</Setter>
				<Setter Property="ContentTemplate">
					<Setter.Value>
						<DataTemplate>
							<Border BorderBrush="{StaticResource ListBorderBrush}" BorderThickness="1,0,1,1" Background="{StaticResource SettingsAreaBackgroundBrush}" Padding="10">
								<ContentPresenter Content="{TemplateBinding Content}" />
							</Border>
						</DataTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="BlackHyperlinkStyle" TargetType="Hyperlink" BasedOn="{StaticResource {x:Type Hyperlink}}">
				<Setter Property="Foreground" Value="Black" />
			</Style>

			<Style x:Key="TaskAreaHeaderStyle" TargetType="HeaderedContentControl" BasedOn="{StaticResource {x:Type HeaderedContentControl}}">
				<Setter Property="BorderBrush" Value="{StaticResource TaskAreaHeaderLineBrush}" />
			</Style>

			<Style x:Key="TaskAreaHyperlinkStyle" TargetType="Hyperlink" BasedOn="{StaticResource {x:Type Hyperlink}}">
				<Setter Property="TextDecorations" Value="None" />
				<Style.Triggers>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="TextDecorations" Value="Underline" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="ViewTitleStyle" TargetType="TextBlock">
				<Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}" />
				<Setter Property="FontSize" Value="20" />
			</Style>

			<Style x:Key="TaskAreaContextMenuStyle" TargetType="ContextMenu">
				<Setter Property="Background" Value="{StaticResource ContextMenuBackgroundBrush}" />
				<Setter Property="BorderBrush" Value="{StaticResource ContextMenuBorderBrush}" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="SnapsToDevicePixels" Value="True"/>
				<Setter Property="OverridesDefaultStyle" Value="True"/>
				<Setter Property="Grid.IsSharedSizeScope" Value="True"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="ContextMenu">
							<Border Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
								<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="TaskAreaMenuItemStyle" TargetType="MenuItem">
				<Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="MenuItem">
							<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
										<ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
										<ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
										<ColumnDefinition x:Name="Col3" Width="14"/>
									</Grid.ColumnDefinitions>

									<!-- ContentPresenter to show an Icon if needed -->
									<ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

									<!-- Glyph is a checkmark if needed for a checkable menu -->
									<Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
										<Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
									</Grid>

									<!-- Content for the menu text etc -->
									<ContentPresenter Grid.Column="1"
                                          Margin="{TemplateBinding Padding}"
                                          x:Name="HeaderHost"
                                          RecognizesAccessKey="True"
                                          ContentSource="Header"/>

									<!-- Content for the menu IGT -->
									<ContentPresenter Grid.Column="2"
                                          Margin="8,1,8,1"
                                          x:Name="IGTHost"
                                          ContentSource="InputGestureText"
                                          VerticalAlignment="Center"/>

									<!-- Arrow drawn path which points to the next level of the menu -->
									<Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
										<Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
									</Grid>

									<!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
									<Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
										<Border x:Name="SubMenuBorder" BorderBrush="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}" BorderThickness="1" Padding="2,2,2,2">
											<Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
												<!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
												<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
											</Grid>
										</Border>
									</Popup>
								</Grid>
							</Border>

							<!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
							<ControlTemplate.Triggers>
								<!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
								<Trigger Property="Role" Value="TopLevelHeader">
									<Setter Property="Padding" Value="6,1,6,1"/>
									<Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
									<Setter Property="MinWidth" Value="0" TargetName="Col0"/>
									<Setter Property="Width" Value="Auto" TargetName="Col3"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
								</Trigger>

								<!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
								<Trigger Property="Role" Value="TopLevelItem">
									<Setter Property="Padding" Value="6,1,6,1"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
								</Trigger>

								<!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
								<Trigger Property="Role" Value="SubmenuHeader">
									<Setter Property="DockPanel.Dock" Value="Top"/>
									<Setter Property="Padding" Value="0,2,0,2"/>
								</Trigger>

								<!-- Role = SubMenuItem : this is a child menu item which has children-->
								<Trigger Property="Role" Value="SubmenuItem">
									<Setter Property="DockPanel.Dock" Value="Top"/>
									<Setter Property="Padding" Value="0,2,0,2"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
								</Trigger>
								<Trigger Property="IsSuspendingPopupAnimation" Value="true">
									<Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
								</Trigger>

								<!-- If no Icon is present the we collapse the Icon Content -->
								<Trigger Property="Icon" Value="{x:Null}">
									<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
								</Trigger>

								<!-- The GlyphPanel contains the CheckMark -->
								<Trigger Property="IsChecked" Value="true">
									<Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
									<Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
								</Trigger>

								<!-- Using the system colors for the Menu Highlight and IsEnabled-->
								<Trigger Property="IsHighlighted" Value="true">
									<Setter Property="Background" Value="{StaticResource ContextMenuHighlightedBrush}" TargetName="Border"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="LightGray"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			
			<Style x:Key="TaskAreaSeparatorStyle" TargetType="Separator">
				<Setter Property="MinWidth" Value="1" />
				<Setter Property="MinHeight" Value="1" />
				<Setter Property="Margin" Value="16,2,4,2" />
				<Setter Property="Background" Value="Black" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Separator}">
							<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<DataTemplate DataType="{x:Type vm:HierarchicalGraphVertex}">
				<TextBlock Text="{Binding Name}" ToolTip="{Binding Name}" />
			</DataTemplate>

			<DataTemplate DataType="{x:Type vm:NetworkGraphVertex}">
				<TextBlock Text="{Binding Name}" ToolTip="{Binding Name}" />
			</DataTemplate>

			<DataTemplate DataType="{x:Type vm:GlobalSegmentVertex}">
				<TextBlock Name="ContentTextBlock" FontSize="14" Text="{Binding StrRep}" LineHeight="14" LineStackingStrategy="BlockLineHeight" MaxWidth="34" TextTrimming="WordEllipsis" />
				<DataTemplate.Triggers>
					<DataTrigger Value="True">
						<DataTrigger.Binding>
							<MultiBinding Converter="{StaticResource IsTextTrimmedConverter}">
								<Binding ElementName="ContentTextBlock" Path="." />
								<Binding ElementName="ContentTextBlock" Path="ActualWidth" />
								<Binding ElementName="ContentTextBlock" Path="Text" />
							</MultiBinding>
						</DataTrigger.Binding>
						<Setter TargetName="ContentTextBlock" Property="ToolTip" Value="{Binding StrRep}" />
					</DataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>
			
			<DataTemplate DataType="{x:Type vm:SegmentPropertyVertex}">
				<TextBlock FontSize="14" Text="{Binding StrRep}" />
			</DataTemplate>

			<Style x:Key="HierarchicalEdgeControlStyle" TargetType="gsc:EdgeControl" BasedOn="{StaticResource {x:Type gsc:EdgeControl}}">
				<Setter Property="Foreground" Value="Black" />
				<Setter Property="Opacity" Value="1" />
			</Style>

			<Style x:Key="HierarchicalVertexControlStyle" TargetType="gsc:VertexControl" BasedOn="{StaticResource {x:Type gsc:VertexControl}}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding IsCluster}" Value="True">
						<Setter Property="Visibility" Value="Collapsed" />
					</DataTrigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="GlobalCorrespondenceEdgeControlStyle" TargetType="gsc:EdgeControl" BasedOn="{StaticResource {x:Type gsc:EdgeControl}}">
				<Setter Property="StrokeThickness">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource StrokeThicknessConverter}">
							<Binding Path="NormalizedFrequency" />
							<Binding>
								<Binding.Source>
									<sys:Int32>5</sys:Int32>
								</Binding.Source>
							</Binding>
							<Binding>
								<Binding.Source>
									<sys:Int32>1</sys:Int32>
								</Binding.Source>
							</Binding>
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="ToolbarDropDownButtonStyle" TargetType="c:DropDownButton" BasedOn="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}">
				<Setter Property="ContentTemplate">
					<Setter.Value>
						<DataTemplate>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<ContentPresenter Content="{Binding .}" />
								<Grid IsHitTestVisible="False" Margin="4,3,1,3" Grid.Column="1">
									<Path Width="7" Height="4" Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z" Fill="#FF000000" />
								</Grid>
							</Grid>
						</DataTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="PhoneticTextBlockStyle" TargetType="{x:Type TextBlock}">
				<Setter Property="FontSize" Value="{StaticResource PhoneticFontSize}" />
				<Setter Property="TextOptions.TextFormattingMode" Value="Display" />
			</Style>

			<Style x:Key="PhoneticDataCellStyle" TargetType="xcdg:DataCell" BasedOn="{StaticResource {x:Type xcdg:DataCell}}">
				<Setter Property="FontSize" Value="{StaticResource PhoneticFontSize}" />
				<Setter Property="TextOptions.TextFormattingMode" Value="Display" />
			</Style>

			<Style x:Key="PhoneticControlStyle" TargetType="{x:Type Control}">
				<Setter Property="FontSize" Value="{StaticResource PhoneticFontSize}" />
				<Setter Property="TextOptions.TextFormattingMode" Value="Display" />
			</Style>

			<Style x:Key="PhoneticTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource PhoneticControlStyle}" />
			<Style x:Key="PhoneticListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource PhoneticControlStyle}" />

			<DataTemplate x:Key="PhoneticCellContentTemplate">
				<TextBlock Name="CellContent" Text="{Binding}" Style="{StaticResource PhoneticTextBlockStyle}" />
				<DataTemplate.Triggers>
					<DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xcdg:DataCell}}, Path=HasValidationError}" Value="True">
						<Setter TargetName="CellContent" Property="TextDecorations">
							<Setter.Value>
								<TextDecorationCollection>
									<TextDecoration Location="Underline" PenOffset="1">
										<TextDecoration.Pen>
											<Pen Thickness="2" Brush="Red" DashStyle="{x:Static DashStyles.Dash}" />
										</TextDecoration.Pen>
									</TextDecoration>
								</TextDecorationCollection>
							</Setter.Value>
						</Setter>
					</DataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>
		</ResourceDictionary>
    </Application.Resources>
</Application>