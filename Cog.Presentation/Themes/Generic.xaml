<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:xcdg="http://schemas.xceed.com/wpf/xaml/datagrid"
					xmlns:gsc="clr-namespace:GraphSharp.Controls;assembly=GraphSharp.Controls"
					xmlns:gsb="clr-namespace:GraphSharp.Behaviors;assembly=GraphSharp.Controls"
					xmlns:cnvtrs="clr-namespace:SIL.Cog.Presentation.Converters"
					xmlns:b="clr-namespace:SIL.Cog.Presentation.Behaviors"
					xmlns:c="clr-namespace:SIL.Cog.Presentation.Controls">
	<cnvtrs:LevelToIndentConverter x:Key="LevelToIndentConverter"/>
	<cnvtrs:DoubleToLog10Converter x:Key="Log10Converter"/>
	<cnvtrs:EnumMatchToBooleanConverter x:Key="EnumMatchConverter" />
	<xcdg:ThicknessConverter x:Key="ThicknessConverter" />
	<cnvtrs:EqualityConverter x:Key="EqualityConverter" />
	<cnvtrs:FirstGroupRowConverter x:Key="GroupRowConverter" />

	<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#FFFCE8AA" />
	<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
	<SolidColorBrush x:Key="ListBorderBrush" Color="#FF88B0E4" />
	<SolidColorBrush x:Key="HeaderTextBrush" Color="#FF10257F" />
	<SolidColorBrush x:Key="AlternatingRowBrush" Color="#FFF6FAFD" />
	<SolidColorBrush x:Key="ListMouseOverBrush" Color="#FFFFF8E2" />

	<SolidColorBrush x:Key="DataGridHeaderBrush" Color="#FFCFDDF0" />
	<SolidColorBrush x:Key="DataGridHeaderSelectedBrush" Color="#FFBBCFE9" />
	<SolidColorBrush x:Key="OverlayBackgroundBrush" Color="#88D0D0D0" />
	<SolidColorBrush x:Key="DataGridGroupingBrush" Color="#FFE4F1FB" />

	<Style TargetType="HeaderedContentControl">
		<Setter Property="BorderBrush" Value="Silver" />
		<Setter Property="BorderThickness" Value="0,0,0,1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="HeaderedContentControl">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<Border Grid.Row="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="0,0,0,5">
							<ContentPresenter TextBlock.Foreground="{StaticResource HeaderTextBrush}" TextBlock.FontWeight="Bold" Content="{TemplateBinding Header}"
											  ContentTemplate="{TemplateBinding HeaderTemplate}" />
						</Border>
						<ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Grid.Row="1" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="Hyperlink">
		<Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Foreground" Value="Blue" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="DataGrid_ColumnHeaderThumbStyle" TargetType="Thumb">
		<Setter Property="Width" Value="8" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<Border Padding="{TemplateBinding Padding}" Background="Transparent">
						<Border Padding="0,2,0,2">
							<Rectangle HorizontalAlignment="Center" Width="2" Fill="{TemplateBinding Background}" />
						</Border>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DataGrid_RowHeaderThumbStyle" TargetType="Thumb">
		<Setter Property="Height" Value="8" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Thumb">
					<Border Padding="{TemplateBinding Padding}" Background="Transparent">
						<Border Padding="2,0,2,0">
							<Rectangle VerticalAlignment="Center" Height="2" Fill="{TemplateBinding Background}" />
						</Border>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="DataGrid_ArrowStyle" TargetType="Polygon">
		<Setter Property="HorizontalAlignment" Value="Right" />
		<Setter Property="VerticalAlignment" Value="Bottom" />
		<Setter Property="StrokeThickness" Value="1" />
		<Setter Property="Stroke" Value="Black" />
		<Setter Property="Fill" Value="Gray" />
		<Setter Property="Visibility" Value="Hidden" />
	</Style>
	
	<Style x:Key="DataGrid_UpArrowStyle" TargetType="Polygon" BasedOn="{StaticResource DataGrid_ArrowStyle}">
		<Setter Property="Margin" Value="0,0,0,2" />
		<Setter Property="Points" Value="0,0 8,0 4,-6 0,0" />
	</Style>

	<Style x:Key="DataGrid_DownArrowStyle" TargetType="Polygon" BasedOn="{StaticResource DataGrid_ArrowStyle}">
		<Setter Property="Margin" Value="0,0,0,1" />
		<Setter Property="Points" Value="0,0 8,0 4,5 0,0" />
	</Style>

	<Style TargetType="xcdg:DataGridControl">
		<Setter Property="BorderBrush" Value="{StaticResource ListBorderBrush}" />
		<Setter Property="Background" Value="White" />
		<Setter Property="ItemScrollingBehavior" Value="Immediate" />
		<Setter Property="AutoCreateColumns" Value="False" />
		<Setter Property="CellErrorStyle" Value="{x:Null}" />
		<Setter Property="b:DataGridControlBehaviors.IsInitialSelectionDisabled" Value="True" />
		<Setter Property="SelectionMode" Value="Single" />
		<Setter Property="b:DataGridControlBehaviors.IsUnselectable" Value="True" />
		<Setter Property="b:DataGridControlBehaviors.AllowCurrentWhenNoSelection" Value="False" />
	</Style>
	
	<Style TargetType="xcdg:TableView">
		<Setter Property="HorizontalGridLineBrush" Value="LightGray" />
		<Setter Property="VerticalGridLineBrush" Value="LightGray" />
		<Setter Property="IsAlternatingRowStyleEnabled" Value="True" />
		<Setter Property="VerticalGridLineThickness" Value="1" />
		<Setter Property="HorizontalGridLineThickness" Value="1" />
		<Setter Property="ShowRowSelectorPane" Value="False" />
		<Setter Property="UseDefaultHeadersFooters" Value="False" />
	</Style>
	
	<Style TargetType="xcdg:ColumnManagerRow">
		<Setter Property="xcdg:RowSelector.Visible" Value="True" />
		<Setter Property="BorderThickness" Value="0" />
	</Style>
	
	<Style TargetType="xcdg:ColumnManagerCell">
		<Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}" />
		<Setter Property="Background" Value="{StaticResource DataGridHeaderBrush}" />
		<Setter Property="Padding" Value="8,2,8,2" />
		<Setter Property="BorderBrush" Value="{StaticResource ListBorderBrush}" />
		<Setter Property="BorderThickness" Value="0,0,1,1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="xcdg:ColumnManagerCell">
					<Grid>
						<Border Name="HeaderBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                                                    BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="12" />
								</Grid.ColumnDefinitions>
								<ContentPresenter Grid.Column="0" Name="HeaderContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  Content="{TemplateBinding Content}" />
								<Polygon Name="UpArrow" Style="{StaticResource DataGrid_UpArrowStyle}" Grid.Column="1" />
								<Polygon Name="DownArrow" Style="{StaticResource DataGrid_DownArrowStyle}" Grid.Column="1" />
							</Grid>
						</Border>
						<Thumb x:Name="PART_ColumnResizerThumbLeft" Style="{StaticResource DataGrid_ColumnHeaderThumbStyle}" Margin="-4,0,0,0" HorizontalAlignment="Left" />
						<Thumb x:Name="PART_ColumnResizerThumb" Style="{StaticResource DataGrid_ColumnHeaderThumbStyle}" Margin="0,0,-4,0" HorizontalAlignment="Right" />
					</Grid>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Value="Center" Binding="{Binding RelativeSource={RelativeSource Self}, Path=HorizontalContentAlignment}" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="HeaderContent" Property="Margin" Value="12,0,0,0" />
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}" Value="Ascending">
							<Setter TargetName="UpArrow" Property="Visibility" Value="Visible" />
						</DataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.SortDirection}" Value="Descending">
							<Setter TargetName="DownArrow" Property="Visibility" Value="Visible" />
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.NavigationBehavior}" Value="CellOnly" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.SelectionUnit}" Value="Cell" />
								<Condition Value="True">
									<Condition.Binding>
										<MultiBinding Converter="{StaticResource EqualityConverter}">
											<Binding RelativeSource="{RelativeSource Self}" Path="ParentColumn" />
											<Binding RelativeSource="{RelativeSource Self}" Path="ParentColumn.DataGridControl.CurrentColumn" />
										</MultiBinding>
									</Condition.Binding>
								</Condition>
							</MultiDataTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource DataGridHeaderSelectedBrush}" />
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.AllowSort}" Value="False">
							<Setter TargetName="HeaderContent" Property="Grid.ColumnSpan" Value="2" />
						</DataTrigger>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentRow.AllowColumnResize}" Value="False">
							<Setter TargetName="PART_ColumnResizerThumb" Property="IsEnabled" Value="False" />
							<Setter TargetName="PART_ColumnResizerThumbLeft" Property="IsEnabled" Value="False" />
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="xcdg:DataRow">
		<Setter Property="SelectionBackground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
		<Setter Property="InactiveSelectionBackground" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource ThicknessConverter},ConverterParameter='Bottom'}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="xcdg:DataRow">
					<!-- This Grid is used to layout the GroupLevelIndicatorPane placeholder and the CellsHost panel. -->
					<Grid x:Name="rootGrid">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />

							<!-- CellsHost panel -->
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						
						<Border x:Name="outerBackground" Grid.Column="2" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}" xcdg:TableView.CanScrollHorizontally="False" />

						<!-- This TextBlock is used to ensure that the DesiredSize for 
						the Row will never fall below the Height of a String using the inherited font size and face-->
						<TextBlock Text="" Visibility="Hidden" Grid.Column="3" Margin="{TemplateBinding BorderThickness}" />

						<!-- The PART_CellsHost part designates the Panel to which this Row's Cells should be added.-->
						<xcdg:FixedCellPanel x:Name="PART_CellsHost" Grid.Column="3"
											 ColumnStretchMinWidth="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMinWidth}"
											 ColumnStretchMode="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).ColumnStretchMode}"
											 FixedCellCount="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).FixedColumnCount, Mode=TwoWay}"
											 FixedColumnDropMarkPen="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).FixedColumnDropMarkPen}"
			                                 TextElement.Foreground="{TemplateBinding Foreground}" />

					</Grid>

					<ControlTemplate.Triggers>
						<!-- This trigger is used to display the Active Selection look -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="outerBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectionBackground}" />
						</MultiDataTrigger>

						<!-- This trigger is used to display the Inactive Selection look -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.IsKeyboardFocusWithin}" Value="False" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.HideSelection}" Value="False" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="outerBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=InactiveSelectionBackground}" />
						</MultiDataTrigger>

						<!-- This trigger is used to display Mouse Over look -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.SelectionUnit}" Value="Row" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="outerBackground" Property="Background" Value="{StaticResource ListMouseOverBrush}" />
						</MultiDataTrigger>

						<!-- This trigger is used to display Mouse Over + Selected look -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).DataGridControl.SelectionUnit}" Value="Row" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="outerBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SelectionBackground}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).IsAlternatingRowStyleEnabled}" Value="True" />
					<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridVirtualizingPanel.ItemIndex), Converter={x:Static xcdg:IndexToOddConverter.Singleton}}" Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Background" Value="{StaticResource AlternatingRowBrush}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>

	<ControlTemplate x:Key="RowHeaderCell" TargetType="xcdg:DataCell">
		<Grid>
			<Border Name="HeaderBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                                                    BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
				<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								  ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"
								  Content="{TemplateBinding Content}" />
			</Border>
		</Grid>
	</ControlTemplate>

	<Style TargetType="xcdg:DataCell">
		<Setter Property="SelectionBackground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
		<Setter Property="InactiveSelectionBackground" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
		<Setter Property="CurrentBackground" Value="{x:Null}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="xcdg:Cell">
					<Grid Margin="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource ThicknessConverter},ConverterParameter='Bottom'}">
						<Border x:Name="rootBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}">
							<xcdg:CellContentPresenter x:Name="PART_CellContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<!-- When changing the appearance (e.g., background/foreground) of the Cell to reflect specific
						states (e.g., IsCurrent), it is recommended to apply the changes directly to the template
						elements because we want those modifications to be effective even when a value has been
						explicitly set to these properties on the TemplatedParent. Also, when someone queries
						the value of these properties on the TemplatedParent, we don't want to return the
						intermediate, state-specific values. -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).(xcdg:DataGridContext.DataGridControl).SelectionUnit}" Value="Cell" />
							</MultiDataTrigger.Conditions>

							<Setter TargetName="rootBorder" Property="Background" Value="{StaticResource ListMouseOverBrush}" />
						</MultiDataTrigger>

						<!-- When the Cell is Current, we want to change its background/foreground to the appropriate brushes.
						We do this only when the cell does not have a validation error because we must give priority
						to the CellErrorStyle (if present).-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsCurrent" Value="True" />
								<Condition Property="HasValidationError" Value="False" />
							</MultiTrigger.Conditions>

							<Setter TargetName="rootBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />
							<Setter TargetName="rootBorder" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsCurrent" Value="True" />
								<Condition Property="HasValidationError" Value="True" />
								<Condition Property="CellErrorStyle" Value="{x:Null}" />
							</MultiTrigger.Conditions>

							<Setter TargetName="rootBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />
							<Setter TargetName="rootBorder" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />
						</MultiTrigger>

						<!-- When the Cell is Selected, we want to change its background/foreground to the appropriate brushes. -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).(xcdg:DataGridContext.DataGridControl).IsKeyboardFocusWithin}" Value="True" />
							</MultiDataTrigger.Conditions>

							<Setter TargetName="rootBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />
							<Setter TargetName="rootBorder" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />
						</MultiDataTrigger>

						<!-- When the Cell is Selected but the parent DataGridControl is not focused, we want to change
						the Cell's background/foreground to the appropriate brushes. -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsCurrent}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).(xcdg:DataGridContext.DataGridControl).IsKeyboardFocusWithin}" Value="False" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).(xcdg:DataGridContext.DataGridControl).HideSelection}" Value="False" />
							</MultiDataTrigger.Conditions>

							<Setter TargetName="rootBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentBackground}" />
							<Setter TargetName="rootBorder" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CurrentForeground}" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSelected}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).(xcdg:DataGridContext.DataGridControl).IsKeyboardFocusWithin}" Value="False" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=(xcdg:DataGridControl.DataGridContext).(xcdg:DataGridContext.DataGridControl).HideSelection}" Value="False" />
							</MultiDataTrigger.Conditions>

							<Setter TargetName="rootBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionBackground}" />
							<Setter TargetName="rootBorder" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=InactiveSelectionForeground}" />
						</MultiDataTrigger>

						<!-- When the Cell's content is Null and the row is not being edited, we want to ensure that the row/cell
						will preserve a minimum height based on the current font size for the row/cell. To do this, we override
						the ContentPresenter's content binding and replace it with an empty string (""), the textbox generated 
						this way will then size to the default text's height. When the trigger is not active anymore, default binding
						is restored automatically. -->

						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ParentColumn.Visible}" Value="False">
							<Setter Property="Visibility" Value="Collapsed" />
						</DataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
							</MultiDataTrigger.Conditions>

							<Setter TargetName="rootBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionBackground}" />
							<Setter TargetName="rootBorder" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=SelectionForeground}" />
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Path=ParentColumn.(b:DataGridControlBehaviors.IsRowHeader), RelativeSource={RelativeSource Self}}" Value="True">
				<Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}" />
				<Setter Property="Background" Value="{StaticResource DataGridHeaderBrush}" />
				<Setter Property="BorderBrush" Value="{StaticResource ListBorderBrush}" />
				<Setter Property="BorderThickness" Value="0,0,1,1" />
				<Setter Property="Padding" Value="0" />
				<Setter Property="HorizontalContentAlignment" Value="Left" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="xcdg:DataGridControl.NavigationBehavior" Value="None" />
				<Setter Property="Template" Value="{StaticResource RowHeaderCell}" />
			</DataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=ParentColumn.(b:DataGridControlBehaviors.IsRowHeader), RelativeSource={RelativeSource Self}}" Value="True" />
					<Condition Binding="{Binding Path=ParentRow.IsCurrent, RelativeSource={RelativeSource Self}}" Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Background" Value="{StaticResource DataGridHeaderSelectedBrush}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=ParentColumn.(b:DataGridControlBehaviors.IsRowHeader), RelativeSource={RelativeSource Self}}" Value="True" />
					<Condition Binding="{Binding Path=ParentRow.IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Background" Value="{StaticResource DataGridHeaderSelectedBrush}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=ParentColumn.(b:DataGridControlBehaviors.IsRowHeader), RelativeSource={RelativeSource Self}}" Value="True" />
					<Condition Value="True">
						<Condition.Binding>
							<MultiBinding Converter="{StaticResource GroupRowConverter}">
								<Binding Path="(xcdg:DataGridControl.DataGridContext).Items.Groups" RelativeSource="{RelativeSource Self}" />
								<Binding Path="ParentRow.(xcdg:DataGridVirtualizingPanel.ItemIndex)" RelativeSource="{RelativeSource Self}" />
								<Binding Path="(xcdg:DataGridControl.DataGridContext).Items.GroupDescriptions.Count" RelativeSource="{RelativeSource Self}" />
							</MultiBinding>
						</Condition.Binding>
					</Condition>
				</MultiDataTrigger.Conditions>
				<Setter Property="BorderThickness" Value="0,1,1,1" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>
	
	<Style TargetType="xcdg:GroupHeaderControl">
		<Setter Property="Background" Value="{StaticResource DataGridGroupingBrush}" />
		<Setter Property="BorderBrush" Value="LightGray" />
		<Setter Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Self}, Path=(xcdg:DataGridControl.DataGridContext).HorizontalGridLineThickness, Converter={StaticResource ThicknessConverter},ConverterParameter='Bottom'}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="xcdg:GroupHeaderControl">
					<Border x:Name="mainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}" Focusable="True" FocusVisualStyle="{TemplateBinding FocusVisualStyle}">
						<!-- ContentPresenter in charge of displaying this GroupHeaderControl's Content, which is a Group by default. -->
						<ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
										  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="xcdg:DataGridControl.NavigationBehavior" Value="None">
							<Setter TargetName="mainBorder" Property="Focusable" Value="False" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<Style TargetType="xcdg:GroupLevelIndicatorPane">
		<Setter Property="Visibility" Value="Collapsed" />
	</Style>

	<Style TargetType="c:MergedHeaderCell">
		<Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}" />
		<Setter Property="Background" Value="{StaticResource DataGridHeaderBrush}" />
		<Setter Property="Padding" Value="8,2,8,2" />
		<Setter Property="BorderBrush" Value="{StaticResource ListBorderBrush}" />
		<Setter Property="BorderThickness" Value="0,0,1,1" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="c:MergedHeaderCell">
					<Border Name="HeaderBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
												BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
						<ContentPresenter Name="HeaderContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											  ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"
											  Content="{TemplateBinding Content}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="Scroll">
		<Setter Property="UIElement.Focusable" Value="False" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<DockPanel Margin="{TemplateBinding Padding}">
							<ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Focusable="false">
								<GridViewHeaderRowPresenter Margin="0"
															Columns="{Binding Path=Columns,RelativeSource={RelativeSource AncestorType={x:Type c:TreeListView}}}"
															SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
							</ScrollViewer>
							<ScrollContentPresenter Name="PART_ScrollContentPresenter"
													KeyboardNavigation.DirectionalNavigation="Local"
													Content="{TemplateBinding Content}"
													ContentTemplate="{TemplateBinding ContentTemplate}"
													CanContentScroll="{TemplateBinding CanContentScroll}"
													SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</DockPanel>
						<ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Minimum="0.0" Maximum="{TemplateBinding ScrollableWidth}"
								   ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding Path=HorizontalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
								   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Cursor="Arrow"/>
						<ScrollBar Name="PART_VerticalScrollBar" Orientation="Vertical" Grid.Column="1" Minimum="0.0" Maximum="{TemplateBinding ScrollableHeight}"
								   ViewportSize="{TemplateBinding ViewportHeight}" Value="{Binding Path=VerticalOffset,RelativeSource={RelativeSource TemplatedParent},Mode=OneWay}"
								   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Cursor="Arrow"/>
						<DockPanel Grid.Column="1" Grid.Row="1" Background="{Binding Path=Background,ElementName=PART_VerticalScrollBar}" LastChildFill="false">
							<Rectangle DockPanel.Dock="Left" Width="1" Fill="White" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
							<Rectangle DockPanel.Dock="Top" Height="1" Fill="White" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
						</DockPanel>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="c:TreeListView">
		<Setter Property="BorderBrush" Value="{StaticResource ListBorderBrush}" />
		<Setter Property="Background" Value="White" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="#FF042271" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<!-- Style="{StaticResource scroll}"-->
				<ControlTemplate TargetType="c:TreeListView">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Name="Bd" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
						<ScrollViewer Style="{StaticResource Scroll}" Background="{TemplateBinding Background}" Focusable="false" CanContentScroll="false"
									  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
									  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" Padding="{TemplateBinding Padding}"
									  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="UIElement.IsEnabled" Value="False">
							<Setter Property="Panel.Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>

	<Style TargetType="c:TreeListViewItem">
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style TargetType="IFrameworkInputElement">
					<Style.Resources>
						<ResourceDictionary />
					</Style.Resources>
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle RadiusY="2" Stroke="#8E6EA6F5" RadiusX="2" StrokeThickness="1" />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Background" Value="#00FFFFFF" />
		<Setter Property="BorderBrush" Value="#00FFFFFF" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Margin" Value="0,0,0,1" />
		<Setter Property="Padding" Value="5,2,5,2" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="c:TreeListViewItem">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>

						<Border x:Name="item" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="2,2,2,2" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition MaxHeight="11" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<c:TreeGridViewRowPresenter x:Name="PART_Header" Grid.RowSpan="2"
																	FirstColumnIndent="{Binding Level,Converter={StaticResource LevelToIndentConverter},RelativeSource={RelativeSource AncestorType={x:Type c:TreeListViewItem}},ConverterParameter=16}"
																	Content="{TemplateBinding Header}" 
																	Columns="{Binding Path=Columns,RelativeSource={RelativeSource AncestorType={x:Type c:TreeListView}}}">
									<c:TreeGridViewRowPresenter.Expander>
										<Grid>
											<ToggleButton Height="16" Width="16" ClickMode="Press" Name="Expander" IsChecked="{Binding Path=IsExpanded,RelativeSource={RelativeSource AncestorType={x:Type c:TreeListViewItem}}}">
												<ToggleButton.Style>
													<Style TargetType="ToggleButton">
														<Style.Resources>
															<ResourceDictionary />
														</Style.Resources>
														<Setter Property="Focusable" Value="False" />
														<Setter Property="Width" Value="16" />
														<Setter Property="Height" Value="16" />
														<Setter Property="Template">
															<Setter.Value>
																<ControlTemplate TargetType="ToggleButton">
																	<Border Height="16" Width="16" Background="#00FFFFFF" Padding="5,5,5,5">
																		<Path Fill="#00FFFFFF" Name="ExpandPath" Stroke="#FF989898">
																			<Path.Data>
																				<PathGeometry Figures="M0,0L0,6L6,0z" />
																			</Path.Data>
																			<Path.RenderTransform>
																				<RotateTransform CenterX="3" Angle="135" CenterY="3" />
																			</Path.RenderTransform>
																		</Path>
																	</Border>
																	<ControlTemplate.Triggers>
																		<Trigger Property="IsMouseOver" Value="True">
																			<Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA" />
																			<Setter Property="Fill" TargetName="ExpandPath" Value="#00FFFFFF" />
																		</Trigger>
																		<Trigger Property="IsChecked" Value="True">
																			<Setter Property="RenderTransform" TargetName="ExpandPath">
																				<Setter.Value>
																					<RotateTransform CenterX="3" Angle="180" CenterY="3" />
																				</Setter.Value>
																			</Setter>
																			<Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959" />
																			<Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626" />
																		</Trigger>
																	</ControlTemplate.Triggers>
																</ControlTemplate>
															</Setter.Value>
														</Setter>
													</Style>
												</ToggleButton.Style>
											</ToggleButton>
										</Grid>
									</c:TreeGridViewRowPresenter.Expander>
								</c:TreeGridViewRowPresenter>
							</Grid>
						</Border>
						<ItemsPresenter Grid.Row="1" Name="ItemsHost" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="TreeViewItem.IsExpanded" Value="False">
							<Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
						</Trigger>
						<Trigger Property="HasItems" Value="False">
							<Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
						</Trigger>

						<Trigger Property="IsMouseOver" SourceName="item" Value="True" >
							<Setter Property="Background" TargetName="item" Value="{StaticResource ListMouseOverBrush}" />
							<Setter Property="BorderBrush" TargetName="item" Value="{StaticResource ListMouseOverBrush}" />
						</Trigger>
						<Trigger Property="TreeViewItem.IsSelected" Value="True">
							<Setter Property="Background" TargetName="item" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter Property="BorderBrush" TargetName="item" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="TreeViewItem.IsSelected" Value="True" />
								<Condition Property="TreeViewItem.IsSelectionActive" Value="False" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="item" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
							<Setter Property="BorderBrush" TargetName="item" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True" />
								<Condition Property="IsMouseOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" TargetName="item" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter Property="BorderBrush" TargetName="item" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" TargetName="item" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="GridViewColumnHeader">
		<Setter Property="Foreground" Value="{StaticResource HeaderTextBrush}" />
		<Setter Property="Background" Value="{StaticResource DataGridHeaderBrush}" />
		<Setter Property="Padding" Value="8,2,8,2" />
		<Setter Property="BorderBrush" Value="{StaticResource ListBorderBrush}" />
		<Setter Property="BorderThickness" Value="0,0,1,1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="GridViewColumnHeader">
					<Grid>
						<Border Name="HeaderBorder" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                                                    BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="12" />
								</Grid.ColumnDefinitions>
								<ContentPresenter Grid.Column="0" Name="HeaderContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                  Content="{TemplateBinding Content}" />
							</Grid>
						</Border>
						<Thumb x:Name="PART_HeaderGripper" Style="{StaticResource DataGrid_ColumnHeaderThumbStyle}" Margin="0,0,-4,0" HorizontalAlignment="Right" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="ListBox">
		<Setter Property="BorderBrush" Value="{StaticResource ListBorderBrush}" />
	</Style>

	<Style TargetType="TextBox">
		<Setter Property="Validation.ErrorTemplate">
			<Setter.Value>
				<ControlTemplate>
					<DockPanel LastChildFill="true">
						<Border Background="Red" DockPanel.Dock="right" Margin="5,0,0,0" Width="20" Height="20" CornerRadius="10"
                                ToolTip="{Binding ElementName=customAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">
							<TextBlock Text="!" VerticalAlignment="center" HorizontalAlignment="center" FontWeight="Bold" Foreground="white" />
						</Border>
						<AdornedElementPlaceholder Name="customAdorner" VerticalAlignment="Center" >
							<Border BorderBrush="Red" BorderThickness="1" />
						</AdornedElementPlaceholder>
					</DockPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="b:TextBoxBehaviors.IsDirtyEnabled" Value="True" />
		<Style.Triggers>
			<Trigger Property="b:TextBoxBehaviors.ShowErrorTemplate" Value="False">
				<Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="c:ZoomControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="c:ZoomControl">
					<Grid>
						<Border BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								ClipToBounds="{TemplateBinding ClipToBounds}">
							<c:ZoomContentPresenter x:Name="PART_Presenter" ClipToBounds="False" />
						</Border>
						<Canvas>

							<!-- Controls -->
							<Border Padding="5"
									CornerRadius="5"
									Background="{StaticResource OverlayBackgroundBrush}"
									Canvas.Left="10"
									Canvas.Top="10"
									ToolTipService.InitialShowDelay="0">
								<Border.ToolTip>
									<StackPanel Orientation="Vertical">
										<TextBlock><Run FontWeight="Bold">Wheel:</Run> Zoom In / Out</TextBlock>
										<TextBlock><Run FontWeight="Bold">ALT + Drag:</Run> ZoomBox</TextBlock>
										<TextBlock><Run FontWeight="Bold">Drag:</Run> Pan</TextBlock>
									</StackPanel>
								</Border.ToolTip>
								<StackPanel Orientation="Vertical">
									<StackPanel.Resources>
										<Style TargetType="{x:Type RadioButton}">
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type RadioButton}">
														<Border x:Name="border"
																BorderBrush="Black"
																Background="Silver"
																BorderThickness="1"
																CornerRadius="5"
																Width="40"
																Height="40"
																Margin="2"
																HorizontalAlignment="Center"
																VerticalAlignment="Center">
															<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
														</Border>

														<ControlTemplate.Triggers>
															<Trigger Property="IsMouseOver" Value="True">
																<Setter TargetName="border" Property="Background" Value="WhiteSmoke" />
															</Trigger>
															<Trigger Property="IsChecked" Value="True">
																<Setter TargetName="border" Property="Background" Value="DarkGray" />
																<Setter TargetName="border" Property="TextBlock.FontWeight" Value="Bold" />
															</Trigger>
														</ControlTemplate.Triggers>
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</StackPanel.Resources>
									<Slider Height="150"
											Minimum="{TemplateBinding MinZoom,Converter={StaticResource Log10Converter}}"
											Maximum="{TemplateBinding MaxZoom,Converter={StaticResource Log10Converter}}"
											Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Zoom,Mode=TwoWay,Converter={StaticResource Log10Converter}}"
											HorizontalAlignment="Center"
											Ticks="0.1, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 2"
											AutoToolTipPlacement="BottomRight"
											AutoToolTipPrecision="1"
											TickPlacement="BottomRight"
											TickFrequency="1"
											LargeChange="1"
											SmallChange="0.1"
											Orientation="Vertical" />
									<TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Zoom,StringFormat='{}{0:F2}x'}"
												HorizontalAlignment="Center"
												FontWeight="Bold" />
									<RadioButton Content="1:1"
													IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Mode,Converter={StaticResource EnumMatchConverter},ConverterParameter=Original}" />
									<RadioButton Content="Fill"
													IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Mode,Converter={StaticResource EnumMatchConverter},ConverterParameter=Fill}" />
								</StackPanel>
							</Border>

							<!-- ZoomBox -->
							<Border BorderBrush="{TemplateBinding ZoomBoxBorderBrush}"
									BorderThickness="{TemplateBinding ZoomBoxBorderThickness}"
									Canvas.Left="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ZoomBox.X}"
									Canvas.Top="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ZoomBox.Y}"
									Opacity="{TemplateBinding ZoomBoxOpacity}"
									Background="{TemplateBinding ZoomBoxBackground}"
									Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ZoomBox.Width}"
									Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ZoomBox.Height}" />
						</Canvas>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="White" />
		<Setter Property="ZoomBoxBackground">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0.0, 0.0" EndPoint="1.0, 1.0">
					<GradientStop Color="Silver" Offset="0.0" />
					<GradientStop Color="DarkGray" Offset="1.0" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="ZoomBoxBorderBrush" Value="Black" />
		<Setter Property="ZoomBoxBorderThickness" Value="1" />
		<Setter Property="ClipToBounds" Value="True" />
		<Style.Triggers>
			<Trigger Property="ModifierMode" Value="Pan">
				<Setter Property="Cursor" Value="SizeAll" />
			</Trigger>
			<Trigger Property="ModifierMode" Value="ZoomBox">
				<Setter Property="Cursor" Value="Hand" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<Style TargetType="TreeView">
		<Setter Property="BorderBrush" Value="{StaticResource ListBorderBrush}" />
	</Style>

	<Style TargetType="gsc:VertexControl">
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="gsb:DragBehavior.IsDragEnabled" Value="False" />
		<Style.Triggers>
			<Trigger Property="gsc:GraphElementBehaviour.IsHighlighted" Value="True">
				<Setter Property="BorderBrush" Value="Orange" />
				<Setter Property="BorderThickness" Value="2" />
				<Setter Property="Canvas.ZIndex" Value="200" />
			</Trigger>
			<Trigger Property="gsc:GraphElementBehaviour.IsSemiHighlighted" Value="True">
				<Setter Property="BorderBrush" Value="Red" />
				<Setter Property="BorderThickness" Value="2" />
				<Setter Property="Canvas.ZIndex" Value="200" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="gsc:EdgeControl">
		<Setter Property="IsDirected" Value="False" />
		<Style.Triggers>
			<Trigger Property="gsc:GraphElementBehaviour.IsHighlighted" Value="True">
				<Setter Property="Foreground" Value="Blue" />
				<Setter Property="Canvas.ZIndex" Value="100" />
			</Trigger>
			<Trigger Property="gsc:GraphElementBehaviour.IsSemiHighlighted" Value="True">
				<Setter Property="Foreground" Value="Red" />
				<Setter Property="Canvas.ZIndex" Value="100" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<Style TargetType="GridSplitter">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="ShowsPreview" Value="True" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="LightGray" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
	<Style TargetType="{x:Type GroupBox}">
		<Setter Property="BorderBrush" Value="#FFD5DFE5" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="6" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="6" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="6" />
						</Grid.RowDefinitions>
						<Border Grid.Row="1" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="4" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" Background="{TemplateBinding Background}" />
						<Border Name="Header" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
							<ContentPresenter ContentSource="Header" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<Border Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
							<Border.OpacityMask>
								<MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
									<Binding ElementName="Header" Path="ActualWidth" />
									<Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
									<Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
								</MultiBinding>
							</Border.OpacityMask>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>